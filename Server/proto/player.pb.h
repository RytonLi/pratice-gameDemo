// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player.proto

#ifndef PROTOBUF_INCLUDED_player_2eproto
#define PROTOBUF_INCLUDED_player_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_player_2eproto 

namespace protobuf_player_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[26];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_player_2eproto
namespace TCCamp {
class AddReq;
class AddReqDefaultTypeInternal;
extern AddReqDefaultTypeInternal _AddReq_default_instance_;
class AddRsp;
class AddRspDefaultTypeInternal;
extern AddRspDefaultTypeInternal _AddRsp_default_instance_;
class BagItem;
class BagItemDefaultTypeInternal;
extern BagItemDefaultTypeInternal _BagItem_default_instance_;
class BagUpdate;
class BagUpdateDefaultTypeInternal;
extern BagUpdateDefaultTypeInternal _BagUpdate_default_instance_;
class PlayerBagUpdateReq;
class PlayerBagUpdateReqDefaultTypeInternal;
extern PlayerBagUpdateReqDefaultTypeInternal _PlayerBagUpdateReq_default_instance_;
class PlayerBagUpdateRsp;
class PlayerBagUpdateRspDefaultTypeInternal;
extern PlayerBagUpdateRspDefaultTypeInternal _PlayerBagUpdateRsp_default_instance_;
class PlayerBuyReq;
class PlayerBuyReqDefaultTypeInternal;
extern PlayerBuyReqDefaultTypeInternal _PlayerBuyReq_default_instance_;
class PlayerBuyRsp;
class PlayerBuyRspDefaultTypeInternal;
extern PlayerBuyRspDefaultTypeInternal _PlayerBuyRsp_default_instance_;
class PlayerCreateReq;
class PlayerCreateReqDefaultTypeInternal;
extern PlayerCreateReqDefaultTypeInternal _PlayerCreateReq_default_instance_;
class PlayerCreateRsp;
class PlayerCreateRspDefaultTypeInternal;
extern PlayerCreateRspDefaultTypeInternal _PlayerCreateRsp_default_instance_;
class PlayerLoginReq;
class PlayerLoginReqDefaultTypeInternal;
extern PlayerLoginReqDefaultTypeInternal _PlayerLoginReq_default_instance_;
class PlayerLoginRsp;
class PlayerLoginRspDefaultTypeInternal;
extern PlayerLoginRspDefaultTypeInternal _PlayerLoginRsp_default_instance_;
class PlayerMoneyReq;
class PlayerMoneyReqDefaultTypeInternal;
extern PlayerMoneyReqDefaultTypeInternal _PlayerMoneyReq_default_instance_;
class PlayerMoneyRsp;
class PlayerMoneyRspDefaultTypeInternal;
extern PlayerMoneyRspDefaultTypeInternal _PlayerMoneyRsp_default_instance_;
class PlayerSaveData;
class PlayerSaveDataDefaultTypeInternal;
extern PlayerSaveDataDefaultTypeInternal _PlayerSaveData_default_instance_;
class PlayerStatusReq;
class PlayerStatusReqDefaultTypeInternal;
extern PlayerStatusReqDefaultTypeInternal _PlayerStatusReq_default_instance_;
class PlayerStatusRsp;
class PlayerStatusRspDefaultTypeInternal;
extern PlayerStatusRspDefaultTypeInternal _PlayerStatusRsp_default_instance_;
class PlayerSyncData;
class PlayerSyncDataDefaultTypeInternal;
extern PlayerSyncDataDefaultTypeInternal _PlayerSyncData_default_instance_;
class PlayerSyncData_BuyLimitEntry_DoNotUse;
class PlayerSyncData_BuyLimitEntry_DoNotUseDefaultTypeInternal;
extern PlayerSyncData_BuyLimitEntry_DoNotUseDefaultTypeInternal _PlayerSyncData_BuyLimitEntry_DoNotUse_default_instance_;
class ShopCompleteReq;
class ShopCompleteReqDefaultTypeInternal;
extern ShopCompleteReqDefaultTypeInternal _ShopCompleteReq_default_instance_;
class ShopCompleteRsp;
class ShopCompleteRspDefaultTypeInternal;
extern ShopCompleteRspDefaultTypeInternal _ShopCompleteRsp_default_instance_;
class ShopItem;
class ShopItemDefaultTypeInternal;
extern ShopItemDefaultTypeInternal _ShopItem_default_instance_;
class ShopUpdate;
class ShopUpdateDefaultTypeInternal;
extern ShopUpdateDefaultTypeInternal _ShopUpdate_default_instance_;
class ShopUpdateReq;
class ShopUpdateReqDefaultTypeInternal;
extern ShopUpdateReqDefaultTypeInternal _ShopUpdateReq_default_instance_;
class ShopUpdateRsp;
class ShopUpdateRspDefaultTypeInternal;
extern ShopUpdateRspDefaultTypeInternal _ShopUpdateRsp_default_instance_;
class SyncAnnounce;
class SyncAnnounceDefaultTypeInternal;
extern SyncAnnounceDefaultTypeInternal _SyncAnnounce_default_instance_;
}  // namespace TCCamp
namespace google {
namespace protobuf {
template<> ::TCCamp::AddReq* Arena::CreateMaybeMessage<::TCCamp::AddReq>(Arena*);
template<> ::TCCamp::AddRsp* Arena::CreateMaybeMessage<::TCCamp::AddRsp>(Arena*);
template<> ::TCCamp::BagItem* Arena::CreateMaybeMessage<::TCCamp::BagItem>(Arena*);
template<> ::TCCamp::BagUpdate* Arena::CreateMaybeMessage<::TCCamp::BagUpdate>(Arena*);
template<> ::TCCamp::PlayerBagUpdateReq* Arena::CreateMaybeMessage<::TCCamp::PlayerBagUpdateReq>(Arena*);
template<> ::TCCamp::PlayerBagUpdateRsp* Arena::CreateMaybeMessage<::TCCamp::PlayerBagUpdateRsp>(Arena*);
template<> ::TCCamp::PlayerBuyReq* Arena::CreateMaybeMessage<::TCCamp::PlayerBuyReq>(Arena*);
template<> ::TCCamp::PlayerBuyRsp* Arena::CreateMaybeMessage<::TCCamp::PlayerBuyRsp>(Arena*);
template<> ::TCCamp::PlayerCreateReq* Arena::CreateMaybeMessage<::TCCamp::PlayerCreateReq>(Arena*);
template<> ::TCCamp::PlayerCreateRsp* Arena::CreateMaybeMessage<::TCCamp::PlayerCreateRsp>(Arena*);
template<> ::TCCamp::PlayerLoginReq* Arena::CreateMaybeMessage<::TCCamp::PlayerLoginReq>(Arena*);
template<> ::TCCamp::PlayerLoginRsp* Arena::CreateMaybeMessage<::TCCamp::PlayerLoginRsp>(Arena*);
template<> ::TCCamp::PlayerMoneyReq* Arena::CreateMaybeMessage<::TCCamp::PlayerMoneyReq>(Arena*);
template<> ::TCCamp::PlayerMoneyRsp* Arena::CreateMaybeMessage<::TCCamp::PlayerMoneyRsp>(Arena*);
template<> ::TCCamp::PlayerSaveData* Arena::CreateMaybeMessage<::TCCamp::PlayerSaveData>(Arena*);
template<> ::TCCamp::PlayerStatusReq* Arena::CreateMaybeMessage<::TCCamp::PlayerStatusReq>(Arena*);
template<> ::TCCamp::PlayerStatusRsp* Arena::CreateMaybeMessage<::TCCamp::PlayerStatusRsp>(Arena*);
template<> ::TCCamp::PlayerSyncData* Arena::CreateMaybeMessage<::TCCamp::PlayerSyncData>(Arena*);
template<> ::TCCamp::PlayerSyncData_BuyLimitEntry_DoNotUse* Arena::CreateMaybeMessage<::TCCamp::PlayerSyncData_BuyLimitEntry_DoNotUse>(Arena*);
template<> ::TCCamp::ShopCompleteReq* Arena::CreateMaybeMessage<::TCCamp::ShopCompleteReq>(Arena*);
template<> ::TCCamp::ShopCompleteRsp* Arena::CreateMaybeMessage<::TCCamp::ShopCompleteRsp>(Arena*);
template<> ::TCCamp::ShopItem* Arena::CreateMaybeMessage<::TCCamp::ShopItem>(Arena*);
template<> ::TCCamp::ShopUpdate* Arena::CreateMaybeMessage<::TCCamp::ShopUpdate>(Arena*);
template<> ::TCCamp::ShopUpdateReq* Arena::CreateMaybeMessage<::TCCamp::ShopUpdateReq>(Arena*);
template<> ::TCCamp::ShopUpdateRsp* Arena::CreateMaybeMessage<::TCCamp::ShopUpdateRsp>(Arena*);
template<> ::TCCamp::SyncAnnounce* Arena::CreateMaybeMessage<::TCCamp::SyncAnnounce>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace TCCamp {

enum CLIENT_CMD {
  CLIENT_CMD_INVALID = 0,
  CLIENT_CMD_BEGIN = 30000,
  CLIENT_PING = 30001,
  CLIENT_ADD_REQ = 30003,
  CLIENT_LOGIN_REQ = 30004,
  CLIENT_CREATE_REQ = 30005,
  CLIENT_ANNOUNCE_REQ = 30006,
  CLIENT_SHOPCOMPLETE_RSP = 30007,
  CLIENT_SHOPUPDATE_RSP = 30008,
  CLIENT_BUY_REQ = 30009,
  CLIENT_BAGUPDATE_REQ = 30010,
  CLIENT_MONEY_REQ = 30011,
  CLIENT_STATUS_REQ = 30012,
  CLIENT_CMD_END = 33000,
  CLIENT_CMD_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CLIENT_CMD_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CLIENT_CMD_IsValid(int value);
const CLIENT_CMD CLIENT_CMD_MIN = CLIENT_CMD_INVALID;
const CLIENT_CMD CLIENT_CMD_MAX = CLIENT_CMD_END;
const int CLIENT_CMD_ARRAYSIZE = CLIENT_CMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* CLIENT_CMD_descriptor();
inline const ::std::string& CLIENT_CMD_Name(CLIENT_CMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    CLIENT_CMD_descriptor(), value);
}
inline bool CLIENT_CMD_Parse(
    const ::std::string& name, CLIENT_CMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CLIENT_CMD>(
    CLIENT_CMD_descriptor(), name, value);
}
enum SERVER_CMD {
  SERVER_CMD_INVALID = 0,
  SERVER_CMD_BEGIN = 1000,
  SERVER_PONG = 1001,
  SERVER_ADD_RSP = 1003,
  SERVER_LOGIN_RSP = 1004,
  SERVER_CREATE_RSP = 1005,
  SERVER_ANNOUNCE_RSP = 1006,
  SERVER_SHOPCOMPLETE_REQ = 1007,
  SERVER_SHOPUPDATE_REQ = 1008,
  SERVER_BUY_RSP = 1009,
  SERVER_BAGUPDATE_RSP = 1010,
  SERVER_MONEY_RSP = 1011,
  SERVER_STATUS_RSP = 1012,
  GM_OPERATE_RSP = 1100,
  SERVER_CMD_END = 10000,
  SERVER_CMD_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SERVER_CMD_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SERVER_CMD_IsValid(int value);
const SERVER_CMD SERVER_CMD_MIN = SERVER_CMD_INVALID;
const SERVER_CMD SERVER_CMD_MAX = SERVER_CMD_END;
const int SERVER_CMD_ARRAYSIZE = SERVER_CMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* SERVER_CMD_descriptor();
inline const ::std::string& SERVER_CMD_Name(SERVER_CMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    SERVER_CMD_descriptor(), value);
}
inline bool SERVER_CMD_Parse(
    const ::std::string& name, SERVER_CMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SERVER_CMD>(
    SERVER_CMD_descriptor(), name, value);
}
enum ITEM_UPDATE_CMD {
  ITEM_ADD = 0,
  ITEM_DELETE = 1,
  ITEM_MODIFY = 2,
  ITEM_UPDATE_CMD_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ITEM_UPDATE_CMD_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ITEM_UPDATE_CMD_IsValid(int value);
const ITEM_UPDATE_CMD ITEM_UPDATE_CMD_MIN = ITEM_ADD;
const ITEM_UPDATE_CMD ITEM_UPDATE_CMD_MAX = ITEM_MODIFY;
const int ITEM_UPDATE_CMD_ARRAYSIZE = ITEM_UPDATE_CMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* ITEM_UPDATE_CMD_descriptor();
inline const ::std::string& ITEM_UPDATE_CMD_Name(ITEM_UPDATE_CMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    ITEM_UPDATE_CMD_descriptor(), value);
}
inline bool ITEM_UPDATE_CMD_Parse(
    const ::std::string& name, ITEM_UPDATE_CMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ITEM_UPDATE_CMD>(
    ITEM_UPDATE_CMD_descriptor(), name, value);
}
// ===================================================================

class AddReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.AddReq) */ {
 public:
  AddReq();
  virtual ~AddReq();

  AddReq(const AddReq& from);

  inline AddReq& operator=(const AddReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddReq(AddReq&& from) noexcept
    : AddReq() {
    *this = ::std::move(from);
  }

  inline AddReq& operator=(AddReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddReq* internal_default_instance() {
    return reinterpret_cast<const AddReq*>(
               &_AddReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AddReq* other);
  friend void swap(AddReq& a, AddReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddReq* New() const final {
    return CreateMaybeMessage<AddReq>(NULL);
  }

  AddReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddReq& from);
  void MergeFrom(const AddReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 A = 1;
  void clear_a();
  static const int kAFieldNumber = 1;
  ::google::protobuf::int32 a() const;
  void set_a(::google::protobuf::int32 value);

  // int32 B = 2;
  void clear_b();
  static const int kBFieldNumber = 2;
  ::google::protobuf::int32 b() const;
  void set_b(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.AddReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 a_;
  ::google::protobuf::int32 b_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.AddRsp) */ {
 public:
  AddRsp();
  virtual ~AddRsp();

  AddRsp(const AddRsp& from);

  inline AddRsp& operator=(const AddRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddRsp(AddRsp&& from) noexcept
    : AddRsp() {
    *this = ::std::move(from);
  }

  inline AddRsp& operator=(AddRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddRsp* internal_default_instance() {
    return reinterpret_cast<const AddRsp*>(
               &_AddRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AddRsp* other);
  friend void swap(AddRsp& a, AddRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddRsp* New() const final {
    return CreateMaybeMessage<AddRsp>(NULL);
  }

  AddRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddRsp& from);
  void MergeFrom(const AddRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 A = 1;
  void clear_a();
  static const int kAFieldNumber = 1;
  ::google::protobuf::int32 a() const;
  void set_a(::google::protobuf::int32 value);

  // int32 B = 2;
  void clear_b();
  static const int kBFieldNumber = 2;
  ::google::protobuf::int32 b() const;
  void set_b(::google::protobuf::int32 value);

  // int32 Result = 3;
  void clear_result();
  static const int kResultFieldNumber = 3;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.AddRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 a_;
  ::google::protobuf::int32 b_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerSyncData_BuyLimitEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<PlayerSyncData_BuyLimitEntry_DoNotUse, 
    ::google::protobuf::int32, ::google::protobuf::int32,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<PlayerSyncData_BuyLimitEntry_DoNotUse, 
    ::google::protobuf::int32, ::google::protobuf::int32,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    0 > SuperType;
  PlayerSyncData_BuyLimitEntry_DoNotUse();
  PlayerSyncData_BuyLimitEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const PlayerSyncData_BuyLimitEntry_DoNotUse& other);
  static const PlayerSyncData_BuyLimitEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PlayerSyncData_BuyLimitEntry_DoNotUse*>(&_PlayerSyncData_BuyLimitEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class PlayerSyncData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.PlayerSyncData) */ {
 public:
  PlayerSyncData();
  virtual ~PlayerSyncData();

  PlayerSyncData(const PlayerSyncData& from);

  inline PlayerSyncData& operator=(const PlayerSyncData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerSyncData(PlayerSyncData&& from) noexcept
    : PlayerSyncData() {
    *this = ::std::move(from);
  }

  inline PlayerSyncData& operator=(PlayerSyncData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerSyncData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerSyncData* internal_default_instance() {
    return reinterpret_cast<const PlayerSyncData*>(
               &_PlayerSyncData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PlayerSyncData* other);
  friend void swap(PlayerSyncData& a, PlayerSyncData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerSyncData* New() const final {
    return CreateMaybeMessage<PlayerSyncData>(NULL);
  }

  PlayerSyncData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerSyncData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerSyncData& from);
  void MergeFrom(const PlayerSyncData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerSyncData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .TCCamp.BagItem Items = 8;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 8;
  ::TCCamp::BagItem* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::BagItem >*
      mutable_items();
  const ::TCCamp::BagItem& items(int index) const;
  ::TCCamp::BagItem* add_items();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::BagItem >&
      items() const;

  // map<int32, int32> BuyLimit = 9;
  int buylimit_size() const;
  void clear_buylimit();
  static const int kBuyLimitFieldNumber = 9;
  const ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >&
      buylimit() const;
  ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >*
      mutable_buylimit();

  // string PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // bytes Name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // float PositionX = 3;
  void clear_positionx();
  static const int kPositionXFieldNumber = 3;
  float positionx() const;
  void set_positionx(float value);

  // float PositionY = 4;
  void clear_positiony();
  static const int kPositionYFieldNumber = 4;
  float positiony() const;
  void set_positiony(float value);

  // float Rotation = 5;
  void clear_rotation();
  static const int kRotationFieldNumber = 5;
  float rotation() const;
  void set_rotation(float value);

  // bool IsWalking = 6;
  void clear_iswalking();
  static const int kIsWalkingFieldNumber = 6;
  bool iswalking() const;
  void set_iswalking(bool value);

  // int32 Money = 7;
  void clear_money();
  static const int kMoneyFieldNumber = 7;
  ::google::protobuf::int32 money() const;
  void set_money(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.PlayerSyncData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::BagItem > items_;
  ::google::protobuf::internal::MapField<
      PlayerSyncData_BuyLimitEntry_DoNotUse,
      ::google::protobuf::int32, ::google::protobuf::int32,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      0 > buylimit_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  float positionx_;
  float positiony_;
  float rotation_;
  bool iswalking_;
  ::google::protobuf::int32 money_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerLoginReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.PlayerLoginReq) */ {
 public:
  PlayerLoginReq();
  virtual ~PlayerLoginReq();

  PlayerLoginReq(const PlayerLoginReq& from);

  inline PlayerLoginReq& operator=(const PlayerLoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerLoginReq(PlayerLoginReq&& from) noexcept
    : PlayerLoginReq() {
    *this = ::std::move(from);
  }

  inline PlayerLoginReq& operator=(PlayerLoginReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerLoginReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerLoginReq* internal_default_instance() {
    return reinterpret_cast<const PlayerLoginReq*>(
               &_PlayerLoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(PlayerLoginReq* other);
  friend void swap(PlayerLoginReq& a, PlayerLoginReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerLoginReq* New() const final {
    return CreateMaybeMessage<PlayerLoginReq>(NULL);
  }

  PlayerLoginReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerLoginReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerLoginReq& from);
  void MergeFrom(const PlayerLoginReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerLoginReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // string Password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:TCCamp.PlayerLoginReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerLoginRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.PlayerLoginRsp) */ {
 public:
  PlayerLoginRsp();
  virtual ~PlayerLoginRsp();

  PlayerLoginRsp(const PlayerLoginRsp& from);

  inline PlayerLoginRsp& operator=(const PlayerLoginRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerLoginRsp(PlayerLoginRsp&& from) noexcept
    : PlayerLoginRsp() {
    *this = ::std::move(from);
  }

  inline PlayerLoginRsp& operator=(PlayerLoginRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerLoginRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerLoginRsp* internal_default_instance() {
    return reinterpret_cast<const PlayerLoginRsp*>(
               &_PlayerLoginRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PlayerLoginRsp* other);
  friend void swap(PlayerLoginRsp& a, PlayerLoginRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerLoginRsp* New() const final {
    return CreateMaybeMessage<PlayerLoginRsp>(NULL);
  }

  PlayerLoginRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerLoginRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerLoginRsp& from);
  void MergeFrom(const PlayerLoginRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerLoginRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Reason = 2;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // .TCCamp.PlayerSyncData PlayerData = 3;
  bool has_playerdata() const;
  void clear_playerdata();
  static const int kPlayerDataFieldNumber = 3;
  private:
  const ::TCCamp::PlayerSyncData& _internal_playerdata() const;
  public:
  const ::TCCamp::PlayerSyncData& playerdata() const;
  ::TCCamp::PlayerSyncData* release_playerdata();
  ::TCCamp::PlayerSyncData* mutable_playerdata();
  void set_allocated_playerdata(::TCCamp::PlayerSyncData* playerdata);

  // int32 Result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.PlayerLoginRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::TCCamp::PlayerSyncData* playerdata_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerCreateReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.PlayerCreateReq) */ {
 public:
  PlayerCreateReq();
  virtual ~PlayerCreateReq();

  PlayerCreateReq(const PlayerCreateReq& from);

  inline PlayerCreateReq& operator=(const PlayerCreateReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerCreateReq(PlayerCreateReq&& from) noexcept
    : PlayerCreateReq() {
    *this = ::std::move(from);
  }

  inline PlayerCreateReq& operator=(PlayerCreateReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerCreateReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerCreateReq* internal_default_instance() {
    return reinterpret_cast<const PlayerCreateReq*>(
               &_PlayerCreateReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(PlayerCreateReq* other);
  friend void swap(PlayerCreateReq& a, PlayerCreateReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerCreateReq* New() const final {
    return CreateMaybeMessage<PlayerCreateReq>(NULL);
  }

  PlayerCreateReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerCreateReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerCreateReq& from);
  void MergeFrom(const PlayerCreateReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerCreateReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // string Password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // bytes Name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:TCCamp.PlayerCreateReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerCreateRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.PlayerCreateRsp) */ {
 public:
  PlayerCreateRsp();
  virtual ~PlayerCreateRsp();

  PlayerCreateRsp(const PlayerCreateRsp& from);

  inline PlayerCreateRsp& operator=(const PlayerCreateRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerCreateRsp(PlayerCreateRsp&& from) noexcept
    : PlayerCreateRsp() {
    *this = ::std::move(from);
  }

  inline PlayerCreateRsp& operator=(PlayerCreateRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerCreateRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerCreateRsp* internal_default_instance() {
    return reinterpret_cast<const PlayerCreateRsp*>(
               &_PlayerCreateRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(PlayerCreateRsp* other);
  friend void swap(PlayerCreateRsp& a, PlayerCreateRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerCreateRsp* New() const final {
    return CreateMaybeMessage<PlayerCreateRsp>(NULL);
  }

  PlayerCreateRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerCreateRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerCreateRsp& from);
  void MergeFrom(const PlayerCreateRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerCreateRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Reason = 2;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // .TCCamp.PlayerSyncData PlayerData = 3;
  bool has_playerdata() const;
  void clear_playerdata();
  static const int kPlayerDataFieldNumber = 3;
  private:
  const ::TCCamp::PlayerSyncData& _internal_playerdata() const;
  public:
  const ::TCCamp::PlayerSyncData& playerdata() const;
  ::TCCamp::PlayerSyncData* release_playerdata();
  ::TCCamp::PlayerSyncData* mutable_playerdata();
  void set_allocated_playerdata(::TCCamp::PlayerSyncData* playerdata);

  // int32 Result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.PlayerCreateRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::TCCamp::PlayerSyncData* playerdata_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SyncAnnounce : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.SyncAnnounce) */ {
 public:
  SyncAnnounce();
  virtual ~SyncAnnounce();

  SyncAnnounce(const SyncAnnounce& from);

  inline SyncAnnounce& operator=(const SyncAnnounce& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SyncAnnounce(SyncAnnounce&& from) noexcept
    : SyncAnnounce() {
    *this = ::std::move(from);
  }

  inline SyncAnnounce& operator=(SyncAnnounce&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncAnnounce& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncAnnounce* internal_default_instance() {
    return reinterpret_cast<const SyncAnnounce*>(
               &_SyncAnnounce_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(SyncAnnounce* other);
  friend void swap(SyncAnnounce& a, SyncAnnounce& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SyncAnnounce* New() const final {
    return CreateMaybeMessage<SyncAnnounce>(NULL);
  }

  SyncAnnounce* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SyncAnnounce>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SyncAnnounce& from);
  void MergeFrom(const SyncAnnounce& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncAnnounce* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Announce = 1;
  void clear_announce();
  static const int kAnnounceFieldNumber = 1;
  const ::std::string& announce() const;
  void set_announce(const ::std::string& value);
  #if LANG_CXX11
  void set_announce(::std::string&& value);
  #endif
  void set_announce(const char* value);
  void set_announce(const void* value, size_t size);
  ::std::string* mutable_announce();
  ::std::string* release_announce();
  void set_allocated_announce(::std::string* announce);

  // @@protoc_insertion_point(class_scope:TCCamp.SyncAnnounce)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr announce_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BagItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.BagItem) */ {
 public:
  BagItem();
  virtual ~BagItem();

  BagItem(const BagItem& from);

  inline BagItem& operator=(const BagItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BagItem(BagItem&& from) noexcept
    : BagItem() {
    *this = ::std::move(from);
  }

  inline BagItem& operator=(BagItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BagItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BagItem* internal_default_instance() {
    return reinterpret_cast<const BagItem*>(
               &_BagItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(BagItem* other);
  friend void swap(BagItem& a, BagItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BagItem* New() const final {
    return CreateMaybeMessage<BagItem>(NULL);
  }

  BagItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BagItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BagItem& from);
  void MergeFrom(const BagItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BagItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 Num = 2;
  void clear_num();
  static const int kNumFieldNumber = 2;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.BagItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 num_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerSaveData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.PlayerSaveData) */ {
 public:
  PlayerSaveData();
  virtual ~PlayerSaveData();

  PlayerSaveData(const PlayerSaveData& from);

  inline PlayerSaveData& operator=(const PlayerSaveData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerSaveData(PlayerSaveData&& from) noexcept
    : PlayerSaveData() {
    *this = ::std::move(from);
  }

  inline PlayerSaveData& operator=(PlayerSaveData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerSaveData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerSaveData* internal_default_instance() {
    return reinterpret_cast<const PlayerSaveData*>(
               &_PlayerSaveData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(PlayerSaveData* other);
  friend void swap(PlayerSaveData& a, PlayerSaveData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerSaveData* New() const final {
    return CreateMaybeMessage<PlayerSaveData>(NULL);
  }

  PlayerSaveData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerSaveData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerSaveData& from);
  void MergeFrom(const PlayerSaveData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerSaveData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // .TCCamp.PlayerSyncData SyncData = 1;
  bool has_syncdata() const;
  void clear_syncdata();
  static const int kSyncDataFieldNumber = 1;
  private:
  const ::TCCamp::PlayerSyncData& _internal_syncdata() const;
  public:
  const ::TCCamp::PlayerSyncData& syncdata() const;
  ::TCCamp::PlayerSyncData* release_syncdata();
  ::TCCamp::PlayerSyncData* mutable_syncdata();
  void set_allocated_syncdata(::TCCamp::PlayerSyncData* syncdata);

  // @@protoc_insertion_point(class_scope:TCCamp.PlayerSaveData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::TCCamp::PlayerSyncData* syncdata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShopItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.ShopItem) */ {
 public:
  ShopItem();
  virtual ~ShopItem();

  ShopItem(const ShopItem& from);

  inline ShopItem& operator=(const ShopItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShopItem(ShopItem&& from) noexcept
    : ShopItem() {
    *this = ::std::move(from);
  }

  inline ShopItem& operator=(ShopItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShopItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShopItem* internal_default_instance() {
    return reinterpret_cast<const ShopItem*>(
               &_ShopItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(ShopItem* other);
  friend void swap(ShopItem& a, ShopItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShopItem* New() const final {
    return CreateMaybeMessage<ShopItem>(NULL);
  }

  ShopItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShopItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShopItem& from);
  void MergeFrom(const ShopItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShopItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes Introduce = 3;
  void clear_introduce();
  static const int kIntroduceFieldNumber = 3;
  const ::std::string& introduce() const;
  void set_introduce(const ::std::string& value);
  #if LANG_CXX11
  void set_introduce(::std::string&& value);
  #endif
  void set_introduce(const char* value);
  void set_introduce(const void* value, size_t size);
  ::std::string* mutable_introduce();
  ::std::string* release_introduce();
  void set_allocated_introduce(::std::string* introduce);

  // int32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 Price = 4;
  void clear_price();
  static const int kPriceFieldNumber = 4;
  ::google::protobuf::int32 price() const;
  void set_price(::google::protobuf::int32 value);

  // float Rate = 6;
  void clear_rate();
  static const int kRateFieldNumber = 6;
  float rate() const;
  void set_rate(float value);

  // int32 SingleLimit = 8;
  void clear_singlelimit();
  static const int kSingleLimitFieldNumber = 8;
  ::google::protobuf::int32 singlelimit() const;
  void set_singlelimit(::google::protobuf::int32 value);

  // bool IsDiscount = 5;
  void clear_isdiscount();
  static const int kIsDiscountFieldNumber = 5;
  bool isdiscount() const;
  void set_isdiscount(bool value);

  // bool IsSingleLimit = 7;
  void clear_issinglelimit();
  static const int kIsSingleLimitFieldNumber = 7;
  bool issinglelimit() const;
  void set_issinglelimit(bool value);

  // bool IsGlobalLimit = 9;
  void clear_isgloballimit();
  static const int kIsGlobalLimitFieldNumber = 9;
  bool isgloballimit() const;
  void set_isgloballimit(bool value);

  // bool IsTimeLimit = 11;
  void clear_istimelimit();
  static const int kIsTimeLimitFieldNumber = 11;
  bool istimelimit() const;
  void set_istimelimit(bool value);

  // int32 GlobalLimit = 10;
  void clear_globallimit();
  static const int kGlobalLimitFieldNumber = 10;
  ::google::protobuf::int32 globallimit() const;
  void set_globallimit(::google::protobuf::int32 value);

  // int32 LimitTime = 12;
  void clear_limittime();
  static const int kLimitTimeFieldNumber = 12;
  ::google::protobuf::int32 limittime() const;
  void set_limittime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.ShopItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr introduce_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 price_;
  float rate_;
  ::google::protobuf::int32 singlelimit_;
  bool isdiscount_;
  bool issinglelimit_;
  bool isgloballimit_;
  bool istimelimit_;
  ::google::protobuf::int32 globallimit_;
  ::google::protobuf::int32 limittime_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShopCompleteReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.ShopCompleteReq) */ {
 public:
  ShopCompleteReq();
  virtual ~ShopCompleteReq();

  ShopCompleteReq(const ShopCompleteReq& from);

  inline ShopCompleteReq& operator=(const ShopCompleteReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShopCompleteReq(ShopCompleteReq&& from) noexcept
    : ShopCompleteReq() {
    *this = ::std::move(from);
  }

  inline ShopCompleteReq& operator=(ShopCompleteReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShopCompleteReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShopCompleteReq* internal_default_instance() {
    return reinterpret_cast<const ShopCompleteReq*>(
               &_ShopCompleteReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(ShopCompleteReq* other);
  friend void swap(ShopCompleteReq& a, ShopCompleteReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShopCompleteReq* New() const final {
    return CreateMaybeMessage<ShopCompleteReq>(NULL);
  }

  ShopCompleteReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShopCompleteReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShopCompleteReq& from);
  void MergeFrom(const ShopCompleteReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShopCompleteReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TCCamp.ShopItem Items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  ::TCCamp::ShopItem* mutable_items(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::ShopItem >*
      mutable_items();
  const ::TCCamp::ShopItem& items(int index) const;
  ::TCCamp::ShopItem* add_items();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::ShopItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:TCCamp.ShopCompleteReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::ShopItem > items_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShopCompleteRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.ShopCompleteRsp) */ {
 public:
  ShopCompleteRsp();
  virtual ~ShopCompleteRsp();

  ShopCompleteRsp(const ShopCompleteRsp& from);

  inline ShopCompleteRsp& operator=(const ShopCompleteRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShopCompleteRsp(ShopCompleteRsp&& from) noexcept
    : ShopCompleteRsp() {
    *this = ::std::move(from);
  }

  inline ShopCompleteRsp& operator=(ShopCompleteRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShopCompleteRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShopCompleteRsp* internal_default_instance() {
    return reinterpret_cast<const ShopCompleteRsp*>(
               &_ShopCompleteRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(ShopCompleteRsp* other);
  friend void swap(ShopCompleteRsp& a, ShopCompleteRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShopCompleteRsp* New() const final {
    return CreateMaybeMessage<ShopCompleteRsp>(NULL);
  }

  ShopCompleteRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShopCompleteRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShopCompleteRsp& from);
  void MergeFrom(const ShopCompleteRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShopCompleteRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // string Reason = 3;
  void clear_reason();
  static const int kReasonFieldNumber = 3;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // int32 Result = 2;
  void clear_result();
  static const int kResultFieldNumber = 2;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.ShopCompleteRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShopUpdate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.ShopUpdate) */ {
 public:
  ShopUpdate();
  virtual ~ShopUpdate();

  ShopUpdate(const ShopUpdate& from);

  inline ShopUpdate& operator=(const ShopUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShopUpdate(ShopUpdate&& from) noexcept
    : ShopUpdate() {
    *this = ::std::move(from);
  }

  inline ShopUpdate& operator=(ShopUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShopUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShopUpdate* internal_default_instance() {
    return reinterpret_cast<const ShopUpdate*>(
               &_ShopUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(ShopUpdate* other);
  friend void swap(ShopUpdate& a, ShopUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShopUpdate* New() const final {
    return CreateMaybeMessage<ShopUpdate>(NULL);
  }

  ShopUpdate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShopUpdate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShopUpdate& from);
  void MergeFrom(const ShopUpdate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShopUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .TCCamp.ShopItem item = 2;
  bool has_item() const;
  void clear_item();
  static const int kItemFieldNumber = 2;
  private:
  const ::TCCamp::ShopItem& _internal_item() const;
  public:
  const ::TCCamp::ShopItem& item() const;
  ::TCCamp::ShopItem* release_item();
  ::TCCamp::ShopItem* mutable_item();
  void set_allocated_item(::TCCamp::ShopItem* item);

  // int32 cmd = 1;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::google::protobuf::int32 cmd() const;
  void set_cmd(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.ShopUpdate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::TCCamp::ShopItem* item_;
  ::google::protobuf::int32 cmd_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShopUpdateReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.ShopUpdateReq) */ {
 public:
  ShopUpdateReq();
  virtual ~ShopUpdateReq();

  ShopUpdateReq(const ShopUpdateReq& from);

  inline ShopUpdateReq& operator=(const ShopUpdateReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShopUpdateReq(ShopUpdateReq&& from) noexcept
    : ShopUpdateReq() {
    *this = ::std::move(from);
  }

  inline ShopUpdateReq& operator=(ShopUpdateReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShopUpdateReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShopUpdateReq* internal_default_instance() {
    return reinterpret_cast<const ShopUpdateReq*>(
               &_ShopUpdateReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(ShopUpdateReq* other);
  friend void swap(ShopUpdateReq& a, ShopUpdateReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShopUpdateReq* New() const final {
    return CreateMaybeMessage<ShopUpdateReq>(NULL);
  }

  ShopUpdateReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShopUpdateReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShopUpdateReq& from);
  void MergeFrom(const ShopUpdateReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShopUpdateReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TCCamp.ShopUpdate UpdateList = 2;
  int updatelist_size() const;
  void clear_updatelist();
  static const int kUpdateListFieldNumber = 2;
  ::TCCamp::ShopUpdate* mutable_updatelist(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::ShopUpdate >*
      mutable_updatelist();
  const ::TCCamp::ShopUpdate& updatelist(int index) const;
  ::TCCamp::ShopUpdate* add_updatelist();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::ShopUpdate >&
      updatelist() const;

  // int32 SyncNum = 1;
  void clear_syncnum();
  static const int kSyncNumFieldNumber = 1;
  ::google::protobuf::int32 syncnum() const;
  void set_syncnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.ShopUpdateReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::ShopUpdate > updatelist_;
  ::google::protobuf::int32 syncnum_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShopUpdateRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.ShopUpdateRsp) */ {
 public:
  ShopUpdateRsp();
  virtual ~ShopUpdateRsp();

  ShopUpdateRsp(const ShopUpdateRsp& from);

  inline ShopUpdateRsp& operator=(const ShopUpdateRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShopUpdateRsp(ShopUpdateRsp&& from) noexcept
    : ShopUpdateRsp() {
    *this = ::std::move(from);
  }

  inline ShopUpdateRsp& operator=(ShopUpdateRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShopUpdateRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShopUpdateRsp* internal_default_instance() {
    return reinterpret_cast<const ShopUpdateRsp*>(
               &_ShopUpdateRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(ShopUpdateRsp* other);
  friend void swap(ShopUpdateRsp& a, ShopUpdateRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShopUpdateRsp* New() const final {
    return CreateMaybeMessage<ShopUpdateRsp>(NULL);
  }

  ShopUpdateRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShopUpdateRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShopUpdateRsp& from);
  void MergeFrom(const ShopUpdateRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShopUpdateRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // string Reason = 3;
  void clear_reason();
  static const int kReasonFieldNumber = 3;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // int32 Result = 2;
  void clear_result();
  static const int kResultFieldNumber = 2;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // int32 SyncNum = 4;
  void clear_syncnum();
  static const int kSyncNumFieldNumber = 4;
  ::google::protobuf::int32 syncnum() const;
  void set_syncnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.ShopUpdateRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 syncnum_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerBuyReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.PlayerBuyReq) */ {
 public:
  PlayerBuyReq();
  virtual ~PlayerBuyReq();

  PlayerBuyReq(const PlayerBuyReq& from);

  inline PlayerBuyReq& operator=(const PlayerBuyReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerBuyReq(PlayerBuyReq&& from) noexcept
    : PlayerBuyReq() {
    *this = ::std::move(from);
  }

  inline PlayerBuyReq& operator=(PlayerBuyReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerBuyReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerBuyReq* internal_default_instance() {
    return reinterpret_cast<const PlayerBuyReq*>(
               &_PlayerBuyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(PlayerBuyReq* other);
  friend void swap(PlayerBuyReq& a, PlayerBuyReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerBuyReq* New() const final {
    return CreateMaybeMessage<PlayerBuyReq>(NULL);
  }

  PlayerBuyReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerBuyReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerBuyReq& from);
  void MergeFrom(const PlayerBuyReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerBuyReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // int32 ItemId = 2;
  void clear_itemid();
  static const int kItemIdFieldNumber = 2;
  ::google::protobuf::int32 itemid() const;
  void set_itemid(::google::protobuf::int32 value);

  // int32 ItemNum = 3;
  void clear_itemnum();
  static const int kItemNumFieldNumber = 3;
  ::google::protobuf::int32 itemnum() const;
  void set_itemnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.PlayerBuyReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 itemnum_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerBuyRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.PlayerBuyRsp) */ {
 public:
  PlayerBuyRsp();
  virtual ~PlayerBuyRsp();

  PlayerBuyRsp(const PlayerBuyRsp& from);

  inline PlayerBuyRsp& operator=(const PlayerBuyRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerBuyRsp(PlayerBuyRsp&& from) noexcept
    : PlayerBuyRsp() {
    *this = ::std::move(from);
  }

  inline PlayerBuyRsp& operator=(PlayerBuyRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerBuyRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerBuyRsp* internal_default_instance() {
    return reinterpret_cast<const PlayerBuyRsp*>(
               &_PlayerBuyRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(PlayerBuyRsp* other);
  friend void swap(PlayerBuyRsp& a, PlayerBuyRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerBuyRsp* New() const final {
    return CreateMaybeMessage<PlayerBuyRsp>(NULL);
  }

  PlayerBuyRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerBuyRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerBuyRsp& from);
  void MergeFrom(const PlayerBuyRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerBuyRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Reason = 2;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // int32 Result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.PlayerBuyRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerBagUpdateReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.PlayerBagUpdateReq) */ {
 public:
  PlayerBagUpdateReq();
  virtual ~PlayerBagUpdateReq();

  PlayerBagUpdateReq(const PlayerBagUpdateReq& from);

  inline PlayerBagUpdateReq& operator=(const PlayerBagUpdateReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerBagUpdateReq(PlayerBagUpdateReq&& from) noexcept
    : PlayerBagUpdateReq() {
    *this = ::std::move(from);
  }

  inline PlayerBagUpdateReq& operator=(PlayerBagUpdateReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerBagUpdateReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerBagUpdateReq* internal_default_instance() {
    return reinterpret_cast<const PlayerBagUpdateReq*>(
               &_PlayerBagUpdateReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(PlayerBagUpdateReq* other);
  friend void swap(PlayerBagUpdateReq& a, PlayerBagUpdateReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerBagUpdateReq* New() const final {
    return CreateMaybeMessage<PlayerBagUpdateReq>(NULL);
  }

  PlayerBagUpdateReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerBagUpdateReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerBagUpdateReq& from);
  void MergeFrom(const PlayerBagUpdateReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerBagUpdateReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // @@protoc_insertion_point(class_scope:TCCamp.PlayerBagUpdateReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BagUpdate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.BagUpdate) */ {
 public:
  BagUpdate();
  virtual ~BagUpdate();

  BagUpdate(const BagUpdate& from);

  inline BagUpdate& operator=(const BagUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BagUpdate(BagUpdate&& from) noexcept
    : BagUpdate() {
    *this = ::std::move(from);
  }

  inline BagUpdate& operator=(BagUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BagUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BagUpdate* internal_default_instance() {
    return reinterpret_cast<const BagUpdate*>(
               &_BagUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(BagUpdate* other);
  friend void swap(BagUpdate& a, BagUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BagUpdate* New() const final {
    return CreateMaybeMessage<BagUpdate>(NULL);
  }

  BagUpdate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BagUpdate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BagUpdate& from);
  void MergeFrom(const BagUpdate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BagUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .TCCamp.BagItem item = 2;
  bool has_item() const;
  void clear_item();
  static const int kItemFieldNumber = 2;
  private:
  const ::TCCamp::BagItem& _internal_item() const;
  public:
  const ::TCCamp::BagItem& item() const;
  ::TCCamp::BagItem* release_item();
  ::TCCamp::BagItem* mutable_item();
  void set_allocated_item(::TCCamp::BagItem* item);

  // int32 cmd = 1;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::google::protobuf::int32 cmd() const;
  void set_cmd(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.BagUpdate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::TCCamp::BagItem* item_;
  ::google::protobuf::int32 cmd_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerBagUpdateRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.PlayerBagUpdateRsp) */ {
 public:
  PlayerBagUpdateRsp();
  virtual ~PlayerBagUpdateRsp();

  PlayerBagUpdateRsp(const PlayerBagUpdateRsp& from);

  inline PlayerBagUpdateRsp& operator=(const PlayerBagUpdateRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerBagUpdateRsp(PlayerBagUpdateRsp&& from) noexcept
    : PlayerBagUpdateRsp() {
    *this = ::std::move(from);
  }

  inline PlayerBagUpdateRsp& operator=(PlayerBagUpdateRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerBagUpdateRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerBagUpdateRsp* internal_default_instance() {
    return reinterpret_cast<const PlayerBagUpdateRsp*>(
               &_PlayerBagUpdateRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(PlayerBagUpdateRsp* other);
  friend void swap(PlayerBagUpdateRsp& a, PlayerBagUpdateRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerBagUpdateRsp* New() const final {
    return CreateMaybeMessage<PlayerBagUpdateRsp>(NULL);
  }

  PlayerBagUpdateRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerBagUpdateRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerBagUpdateRsp& from);
  void MergeFrom(const PlayerBagUpdateRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerBagUpdateRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TCCamp.BagUpdate UpdateList = 3;
  int updatelist_size() const;
  void clear_updatelist();
  static const int kUpdateListFieldNumber = 3;
  ::TCCamp::BagUpdate* mutable_updatelist(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::BagUpdate >*
      mutable_updatelist();
  const ::TCCamp::BagUpdate& updatelist(int index) const;
  ::TCCamp::BagUpdate* add_updatelist();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::BagUpdate >&
      updatelist() const;

  // string Reason = 2;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // int32 Result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.PlayerBagUpdateRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::BagUpdate > updatelist_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerMoneyReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.PlayerMoneyReq) */ {
 public:
  PlayerMoneyReq();
  virtual ~PlayerMoneyReq();

  PlayerMoneyReq(const PlayerMoneyReq& from);

  inline PlayerMoneyReq& operator=(const PlayerMoneyReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerMoneyReq(PlayerMoneyReq&& from) noexcept
    : PlayerMoneyReq() {
    *this = ::std::move(from);
  }

  inline PlayerMoneyReq& operator=(PlayerMoneyReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerMoneyReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerMoneyReq* internal_default_instance() {
    return reinterpret_cast<const PlayerMoneyReq*>(
               &_PlayerMoneyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(PlayerMoneyReq* other);
  friend void swap(PlayerMoneyReq& a, PlayerMoneyReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerMoneyReq* New() const final {
    return CreateMaybeMessage<PlayerMoneyReq>(NULL);
  }

  PlayerMoneyReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerMoneyReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerMoneyReq& from);
  void MergeFrom(const PlayerMoneyReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerMoneyReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // @@protoc_insertion_point(class_scope:TCCamp.PlayerMoneyReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerMoneyRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.PlayerMoneyRsp) */ {
 public:
  PlayerMoneyRsp();
  virtual ~PlayerMoneyRsp();

  PlayerMoneyRsp(const PlayerMoneyRsp& from);

  inline PlayerMoneyRsp& operator=(const PlayerMoneyRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerMoneyRsp(PlayerMoneyRsp&& from) noexcept
    : PlayerMoneyRsp() {
    *this = ::std::move(from);
  }

  inline PlayerMoneyRsp& operator=(PlayerMoneyRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerMoneyRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerMoneyRsp* internal_default_instance() {
    return reinterpret_cast<const PlayerMoneyRsp*>(
               &_PlayerMoneyRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(PlayerMoneyRsp* other);
  friend void swap(PlayerMoneyRsp& a, PlayerMoneyRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerMoneyRsp* New() const final {
    return CreateMaybeMessage<PlayerMoneyRsp>(NULL);
  }

  PlayerMoneyRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerMoneyRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerMoneyRsp& from);
  void MergeFrom(const PlayerMoneyRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerMoneyRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Reason = 2;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // int32 Result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // int32 Money = 3;
  void clear_money();
  static const int kMoneyFieldNumber = 3;
  ::google::protobuf::int32 money() const;
  void set_money(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.PlayerMoneyRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 money_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerStatusReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.PlayerStatusReq) */ {
 public:
  PlayerStatusReq();
  virtual ~PlayerStatusReq();

  PlayerStatusReq(const PlayerStatusReq& from);

  inline PlayerStatusReq& operator=(const PlayerStatusReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerStatusReq(PlayerStatusReq&& from) noexcept
    : PlayerStatusReq() {
    *this = ::std::move(from);
  }

  inline PlayerStatusReq& operator=(PlayerStatusReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerStatusReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerStatusReq* internal_default_instance() {
    return reinterpret_cast<const PlayerStatusReq*>(
               &_PlayerStatusReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(PlayerStatusReq* other);
  friend void swap(PlayerStatusReq& a, PlayerStatusReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerStatusReq* New() const final {
    return CreateMaybeMessage<PlayerStatusReq>(NULL);
  }

  PlayerStatusReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerStatusReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerStatusReq& from);
  void MergeFrom(const PlayerStatusReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerStatusReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // float PositionX = 2;
  void clear_positionx();
  static const int kPositionXFieldNumber = 2;
  float positionx() const;
  void set_positionx(float value);

  // float PositionY = 3;
  void clear_positiony();
  static const int kPositionYFieldNumber = 3;
  float positiony() const;
  void set_positiony(float value);

  // float Rotation = 4;
  void clear_rotation();
  static const int kRotationFieldNumber = 4;
  float rotation() const;
  void set_rotation(float value);

  // bool IsWalking = 5;
  void clear_iswalking();
  static const int kIsWalkingFieldNumber = 5;
  bool iswalking() const;
  void set_iswalking(bool value);

  // @@protoc_insertion_point(class_scope:TCCamp.PlayerStatusReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  float positionx_;
  float positiony_;
  float rotation_;
  bool iswalking_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerStatusRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.PlayerStatusRsp) */ {
 public:
  PlayerStatusRsp();
  virtual ~PlayerStatusRsp();

  PlayerStatusRsp(const PlayerStatusRsp& from);

  inline PlayerStatusRsp& operator=(const PlayerStatusRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerStatusRsp(PlayerStatusRsp&& from) noexcept
    : PlayerStatusRsp() {
    *this = ::std::move(from);
  }

  inline PlayerStatusRsp& operator=(PlayerStatusRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerStatusRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerStatusRsp* internal_default_instance() {
    return reinterpret_cast<const PlayerStatusRsp*>(
               &_PlayerStatusRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(PlayerStatusRsp* other);
  friend void swap(PlayerStatusRsp& a, PlayerStatusRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerStatusRsp* New() const final {
    return CreateMaybeMessage<PlayerStatusRsp>(NULL);
  }

  PlayerStatusRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerStatusRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerStatusRsp& from);
  void MergeFrom(const PlayerStatusRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerStatusRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Reason = 2;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // int32 Result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.PlayerStatusRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddReq

// int32 A = 1;
inline void AddReq::clear_a() {
  a_ = 0;
}
inline ::google::protobuf::int32 AddReq::a() const {
  // @@protoc_insertion_point(field_get:TCCamp.AddReq.A)
  return a_;
}
inline void AddReq::set_a(::google::protobuf::int32 value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.AddReq.A)
}

// int32 B = 2;
inline void AddReq::clear_b() {
  b_ = 0;
}
inline ::google::protobuf::int32 AddReq::b() const {
  // @@protoc_insertion_point(field_get:TCCamp.AddReq.B)
  return b_;
}
inline void AddReq::set_b(::google::protobuf::int32 value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.AddReq.B)
}

// -------------------------------------------------------------------

// AddRsp

// int32 A = 1;
inline void AddRsp::clear_a() {
  a_ = 0;
}
inline ::google::protobuf::int32 AddRsp::a() const {
  // @@protoc_insertion_point(field_get:TCCamp.AddRsp.A)
  return a_;
}
inline void AddRsp::set_a(::google::protobuf::int32 value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.AddRsp.A)
}

// int32 B = 2;
inline void AddRsp::clear_b() {
  b_ = 0;
}
inline ::google::protobuf::int32 AddRsp::b() const {
  // @@protoc_insertion_point(field_get:TCCamp.AddRsp.B)
  return b_;
}
inline void AddRsp::set_b(::google::protobuf::int32 value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.AddRsp.B)
}

// int32 Result = 3;
inline void AddRsp::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 AddRsp::result() const {
  // @@protoc_insertion_point(field_get:TCCamp.AddRsp.Result)
  return result_;
}
inline void AddRsp::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.AddRsp.Result)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PlayerSyncData

// string PlayerID = 1;
inline void PlayerSyncData::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerSyncData::playerid() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerSyncData.PlayerID)
  return playerid_.GetNoArena();
}
inline void PlayerSyncData::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerSyncData.PlayerID)
}
#if LANG_CXX11
inline void PlayerSyncData::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerSyncData.PlayerID)
}
#endif
inline void PlayerSyncData::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerSyncData.PlayerID)
}
inline void PlayerSyncData::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerSyncData.PlayerID)
}
inline ::std::string* PlayerSyncData::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerSyncData.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerSyncData::release_playerid() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerSyncData.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerSyncData::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerSyncData.PlayerID)
}

// bytes Name = 2;
inline void PlayerSyncData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerSyncData::name() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerSyncData.Name)
  return name_.GetNoArena();
}
inline void PlayerSyncData::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerSyncData.Name)
}
#if LANG_CXX11
inline void PlayerSyncData::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerSyncData.Name)
}
#endif
inline void PlayerSyncData::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerSyncData.Name)
}
inline void PlayerSyncData::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerSyncData.Name)
}
inline ::std::string* PlayerSyncData::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerSyncData.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerSyncData::release_name() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerSyncData.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerSyncData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerSyncData.Name)
}

// float PositionX = 3;
inline void PlayerSyncData::clear_positionx() {
  positionx_ = 0;
}
inline float PlayerSyncData::positionx() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerSyncData.PositionX)
  return positionx_;
}
inline void PlayerSyncData::set_positionx(float value) {
  
  positionx_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.PlayerSyncData.PositionX)
}

// float PositionY = 4;
inline void PlayerSyncData::clear_positiony() {
  positiony_ = 0;
}
inline float PlayerSyncData::positiony() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerSyncData.PositionY)
  return positiony_;
}
inline void PlayerSyncData::set_positiony(float value) {
  
  positiony_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.PlayerSyncData.PositionY)
}

// float Rotation = 5;
inline void PlayerSyncData::clear_rotation() {
  rotation_ = 0;
}
inline float PlayerSyncData::rotation() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerSyncData.Rotation)
  return rotation_;
}
inline void PlayerSyncData::set_rotation(float value) {
  
  rotation_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.PlayerSyncData.Rotation)
}

// bool IsWalking = 6;
inline void PlayerSyncData::clear_iswalking() {
  iswalking_ = false;
}
inline bool PlayerSyncData::iswalking() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerSyncData.IsWalking)
  return iswalking_;
}
inline void PlayerSyncData::set_iswalking(bool value) {
  
  iswalking_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.PlayerSyncData.IsWalking)
}

// int32 Money = 7;
inline void PlayerSyncData::clear_money() {
  money_ = 0;
}
inline ::google::protobuf::int32 PlayerSyncData::money() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerSyncData.Money)
  return money_;
}
inline void PlayerSyncData::set_money(::google::protobuf::int32 value) {
  
  money_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.PlayerSyncData.Money)
}

// repeated .TCCamp.BagItem Items = 8;
inline int PlayerSyncData::items_size() const {
  return items_.size();
}
inline void PlayerSyncData::clear_items() {
  items_.Clear();
}
inline ::TCCamp::BagItem* PlayerSyncData::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerSyncData.Items)
  return items_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::BagItem >*
PlayerSyncData::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.PlayerSyncData.Items)
  return &items_;
}
inline const ::TCCamp::BagItem& PlayerSyncData::items(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerSyncData.Items)
  return items_.Get(index);
}
inline ::TCCamp::BagItem* PlayerSyncData::add_items() {
  // @@protoc_insertion_point(field_add:TCCamp.PlayerSyncData.Items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::BagItem >&
PlayerSyncData::items() const {
  // @@protoc_insertion_point(field_list:TCCamp.PlayerSyncData.Items)
  return items_;
}

// map<int32, int32> BuyLimit = 9;
inline int PlayerSyncData::buylimit_size() const {
  return buylimit_.size();
}
inline void PlayerSyncData::clear_buylimit() {
  buylimit_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >&
PlayerSyncData::buylimit() const {
  // @@protoc_insertion_point(field_map:TCCamp.PlayerSyncData.BuyLimit)
  return buylimit_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int32, ::google::protobuf::int32 >*
PlayerSyncData::mutable_buylimit() {
  // @@protoc_insertion_point(field_mutable_map:TCCamp.PlayerSyncData.BuyLimit)
  return buylimit_.MutableMap();
}

// -------------------------------------------------------------------

// PlayerLoginReq

// string PlayerID = 1;
inline void PlayerLoginReq::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerLoginReq::playerid() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerLoginReq.PlayerID)
  return playerid_.GetNoArena();
}
inline void PlayerLoginReq::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerLoginReq.PlayerID)
}
#if LANG_CXX11
inline void PlayerLoginReq::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerLoginReq.PlayerID)
}
#endif
inline void PlayerLoginReq::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerLoginReq.PlayerID)
}
inline void PlayerLoginReq::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerLoginReq.PlayerID)
}
inline ::std::string* PlayerLoginReq::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerLoginReq.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerLoginReq::release_playerid() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerLoginReq.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerLoginReq::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerLoginReq.PlayerID)
}

// string Password = 2;
inline void PlayerLoginReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerLoginReq::password() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerLoginReq.Password)
  return password_.GetNoArena();
}
inline void PlayerLoginReq::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerLoginReq.Password)
}
#if LANG_CXX11
inline void PlayerLoginReq::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerLoginReq.Password)
}
#endif
inline void PlayerLoginReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerLoginReq.Password)
}
inline void PlayerLoginReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerLoginReq.Password)
}
inline ::std::string* PlayerLoginReq::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerLoginReq.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerLoginReq::release_password() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerLoginReq.Password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerLoginReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerLoginReq.Password)
}

// -------------------------------------------------------------------

// PlayerLoginRsp

// int32 Result = 1;
inline void PlayerLoginRsp::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 PlayerLoginRsp::result() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerLoginRsp.Result)
  return result_;
}
inline void PlayerLoginRsp::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.PlayerLoginRsp.Result)
}

// string Reason = 2;
inline void PlayerLoginRsp::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerLoginRsp::reason() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerLoginRsp.Reason)
  return reason_.GetNoArena();
}
inline void PlayerLoginRsp::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerLoginRsp.Reason)
}
#if LANG_CXX11
inline void PlayerLoginRsp::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerLoginRsp.Reason)
}
#endif
inline void PlayerLoginRsp::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerLoginRsp.Reason)
}
inline void PlayerLoginRsp::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerLoginRsp.Reason)
}
inline ::std::string* PlayerLoginRsp::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerLoginRsp.Reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerLoginRsp::release_reason() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerLoginRsp.Reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerLoginRsp::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerLoginRsp.Reason)
}

// .TCCamp.PlayerSyncData PlayerData = 3;
inline bool PlayerLoginRsp::has_playerdata() const {
  return this != internal_default_instance() && playerdata_ != NULL;
}
inline void PlayerLoginRsp::clear_playerdata() {
  if (GetArenaNoVirtual() == NULL && playerdata_ != NULL) {
    delete playerdata_;
  }
  playerdata_ = NULL;
}
inline const ::TCCamp::PlayerSyncData& PlayerLoginRsp::_internal_playerdata() const {
  return *playerdata_;
}
inline const ::TCCamp::PlayerSyncData& PlayerLoginRsp::playerdata() const {
  const ::TCCamp::PlayerSyncData* p = playerdata_;
  // @@protoc_insertion_point(field_get:TCCamp.PlayerLoginRsp.PlayerData)
  return p != NULL ? *p : *reinterpret_cast<const ::TCCamp::PlayerSyncData*>(
      &::TCCamp::_PlayerSyncData_default_instance_);
}
inline ::TCCamp::PlayerSyncData* PlayerLoginRsp::release_playerdata() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerLoginRsp.PlayerData)
  
  ::TCCamp::PlayerSyncData* temp = playerdata_;
  playerdata_ = NULL;
  return temp;
}
inline ::TCCamp::PlayerSyncData* PlayerLoginRsp::mutable_playerdata() {
  
  if (playerdata_ == NULL) {
    auto* p = CreateMaybeMessage<::TCCamp::PlayerSyncData>(GetArenaNoVirtual());
    playerdata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerLoginRsp.PlayerData)
  return playerdata_;
}
inline void PlayerLoginRsp::set_allocated_playerdata(::TCCamp::PlayerSyncData* playerdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete playerdata_;
  }
  if (playerdata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      playerdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, playerdata, submessage_arena);
    }
    
  } else {
    
  }
  playerdata_ = playerdata;
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerLoginRsp.PlayerData)
}

// -------------------------------------------------------------------

// PlayerCreateReq

// string PlayerID = 1;
inline void PlayerCreateReq::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerCreateReq::playerid() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerCreateReq.PlayerID)
  return playerid_.GetNoArena();
}
inline void PlayerCreateReq::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerCreateReq.PlayerID)
}
#if LANG_CXX11
inline void PlayerCreateReq::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerCreateReq.PlayerID)
}
#endif
inline void PlayerCreateReq::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerCreateReq.PlayerID)
}
inline void PlayerCreateReq::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerCreateReq.PlayerID)
}
inline ::std::string* PlayerCreateReq::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerCreateReq.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerCreateReq::release_playerid() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerCreateReq.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerCreateReq::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerCreateReq.PlayerID)
}

// string Password = 2;
inline void PlayerCreateReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerCreateReq::password() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerCreateReq.Password)
  return password_.GetNoArena();
}
inline void PlayerCreateReq::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerCreateReq.Password)
}
#if LANG_CXX11
inline void PlayerCreateReq::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerCreateReq.Password)
}
#endif
inline void PlayerCreateReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerCreateReq.Password)
}
inline void PlayerCreateReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerCreateReq.Password)
}
inline ::std::string* PlayerCreateReq::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerCreateReq.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerCreateReq::release_password() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerCreateReq.Password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerCreateReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerCreateReq.Password)
}

// bytes Name = 3;
inline void PlayerCreateReq::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerCreateReq::name() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerCreateReq.Name)
  return name_.GetNoArena();
}
inline void PlayerCreateReq::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerCreateReq.Name)
}
#if LANG_CXX11
inline void PlayerCreateReq::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerCreateReq.Name)
}
#endif
inline void PlayerCreateReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerCreateReq.Name)
}
inline void PlayerCreateReq::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerCreateReq.Name)
}
inline ::std::string* PlayerCreateReq::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerCreateReq.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerCreateReq::release_name() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerCreateReq.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerCreateReq::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerCreateReq.Name)
}

// -------------------------------------------------------------------

// PlayerCreateRsp

// int32 Result = 1;
inline void PlayerCreateRsp::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 PlayerCreateRsp::result() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerCreateRsp.Result)
  return result_;
}
inline void PlayerCreateRsp::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.PlayerCreateRsp.Result)
}

// string Reason = 2;
inline void PlayerCreateRsp::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerCreateRsp::reason() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerCreateRsp.Reason)
  return reason_.GetNoArena();
}
inline void PlayerCreateRsp::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerCreateRsp.Reason)
}
#if LANG_CXX11
inline void PlayerCreateRsp::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerCreateRsp.Reason)
}
#endif
inline void PlayerCreateRsp::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerCreateRsp.Reason)
}
inline void PlayerCreateRsp::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerCreateRsp.Reason)
}
inline ::std::string* PlayerCreateRsp::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerCreateRsp.Reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerCreateRsp::release_reason() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerCreateRsp.Reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerCreateRsp::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerCreateRsp.Reason)
}

// .TCCamp.PlayerSyncData PlayerData = 3;
inline bool PlayerCreateRsp::has_playerdata() const {
  return this != internal_default_instance() && playerdata_ != NULL;
}
inline void PlayerCreateRsp::clear_playerdata() {
  if (GetArenaNoVirtual() == NULL && playerdata_ != NULL) {
    delete playerdata_;
  }
  playerdata_ = NULL;
}
inline const ::TCCamp::PlayerSyncData& PlayerCreateRsp::_internal_playerdata() const {
  return *playerdata_;
}
inline const ::TCCamp::PlayerSyncData& PlayerCreateRsp::playerdata() const {
  const ::TCCamp::PlayerSyncData* p = playerdata_;
  // @@protoc_insertion_point(field_get:TCCamp.PlayerCreateRsp.PlayerData)
  return p != NULL ? *p : *reinterpret_cast<const ::TCCamp::PlayerSyncData*>(
      &::TCCamp::_PlayerSyncData_default_instance_);
}
inline ::TCCamp::PlayerSyncData* PlayerCreateRsp::release_playerdata() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerCreateRsp.PlayerData)
  
  ::TCCamp::PlayerSyncData* temp = playerdata_;
  playerdata_ = NULL;
  return temp;
}
inline ::TCCamp::PlayerSyncData* PlayerCreateRsp::mutable_playerdata() {
  
  if (playerdata_ == NULL) {
    auto* p = CreateMaybeMessage<::TCCamp::PlayerSyncData>(GetArenaNoVirtual());
    playerdata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerCreateRsp.PlayerData)
  return playerdata_;
}
inline void PlayerCreateRsp::set_allocated_playerdata(::TCCamp::PlayerSyncData* playerdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete playerdata_;
  }
  if (playerdata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      playerdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, playerdata, submessage_arena);
    }
    
  } else {
    
  }
  playerdata_ = playerdata;
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerCreateRsp.PlayerData)
}

// -------------------------------------------------------------------

// SyncAnnounce

// bytes Announce = 1;
inline void SyncAnnounce::clear_announce() {
  announce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SyncAnnounce::announce() const {
  // @@protoc_insertion_point(field_get:TCCamp.SyncAnnounce.Announce)
  return announce_.GetNoArena();
}
inline void SyncAnnounce::set_announce(const ::std::string& value) {
  
  announce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.SyncAnnounce.Announce)
}
#if LANG_CXX11
inline void SyncAnnounce::set_announce(::std::string&& value) {
  
  announce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.SyncAnnounce.Announce)
}
#endif
inline void SyncAnnounce::set_announce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  announce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.SyncAnnounce.Announce)
}
inline void SyncAnnounce::set_announce(const void* value, size_t size) {
  
  announce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.SyncAnnounce.Announce)
}
inline ::std::string* SyncAnnounce::mutable_announce() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.SyncAnnounce.Announce)
  return announce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncAnnounce::release_announce() {
  // @@protoc_insertion_point(field_release:TCCamp.SyncAnnounce.Announce)
  
  return announce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncAnnounce::set_allocated_announce(::std::string* announce) {
  if (announce != NULL) {
    
  } else {
    
  }
  announce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), announce);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.SyncAnnounce.Announce)
}

// -------------------------------------------------------------------

// BagItem

// int32 Id = 1;
inline void BagItem::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 BagItem::id() const {
  // @@protoc_insertion_point(field_get:TCCamp.BagItem.Id)
  return id_;
}
inline void BagItem::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.BagItem.Id)
}

// int32 Num = 2;
inline void BagItem::clear_num() {
  num_ = 0;
}
inline ::google::protobuf::int32 BagItem::num() const {
  // @@protoc_insertion_point(field_get:TCCamp.BagItem.Num)
  return num_;
}
inline void BagItem::set_num(::google::protobuf::int32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.BagItem.Num)
}

// -------------------------------------------------------------------

// PlayerSaveData

// .TCCamp.PlayerSyncData SyncData = 1;
inline bool PlayerSaveData::has_syncdata() const {
  return this != internal_default_instance() && syncdata_ != NULL;
}
inline void PlayerSaveData::clear_syncdata() {
  if (GetArenaNoVirtual() == NULL && syncdata_ != NULL) {
    delete syncdata_;
  }
  syncdata_ = NULL;
}
inline const ::TCCamp::PlayerSyncData& PlayerSaveData::_internal_syncdata() const {
  return *syncdata_;
}
inline const ::TCCamp::PlayerSyncData& PlayerSaveData::syncdata() const {
  const ::TCCamp::PlayerSyncData* p = syncdata_;
  // @@protoc_insertion_point(field_get:TCCamp.PlayerSaveData.SyncData)
  return p != NULL ? *p : *reinterpret_cast<const ::TCCamp::PlayerSyncData*>(
      &::TCCamp::_PlayerSyncData_default_instance_);
}
inline ::TCCamp::PlayerSyncData* PlayerSaveData::release_syncdata() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerSaveData.SyncData)
  
  ::TCCamp::PlayerSyncData* temp = syncdata_;
  syncdata_ = NULL;
  return temp;
}
inline ::TCCamp::PlayerSyncData* PlayerSaveData::mutable_syncdata() {
  
  if (syncdata_ == NULL) {
    auto* p = CreateMaybeMessage<::TCCamp::PlayerSyncData>(GetArenaNoVirtual());
    syncdata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerSaveData.SyncData)
  return syncdata_;
}
inline void PlayerSaveData::set_allocated_syncdata(::TCCamp::PlayerSyncData* syncdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete syncdata_;
  }
  if (syncdata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      syncdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, syncdata, submessage_arena);
    }
    
  } else {
    
  }
  syncdata_ = syncdata;
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerSaveData.SyncData)
}

// string Password = 2;
inline void PlayerSaveData::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerSaveData::password() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerSaveData.Password)
  return password_.GetNoArena();
}
inline void PlayerSaveData::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerSaveData.Password)
}
#if LANG_CXX11
inline void PlayerSaveData::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerSaveData.Password)
}
#endif
inline void PlayerSaveData::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerSaveData.Password)
}
inline void PlayerSaveData::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerSaveData.Password)
}
inline ::std::string* PlayerSaveData::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerSaveData.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerSaveData::release_password() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerSaveData.Password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerSaveData::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerSaveData.Password)
}

// -------------------------------------------------------------------

// ShopItem

// int32 Id = 1;
inline void ShopItem::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 ShopItem::id() const {
  // @@protoc_insertion_point(field_get:TCCamp.ShopItem.Id)
  return id_;
}
inline void ShopItem::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.ShopItem.Id)
}

// bytes Name = 2;
inline void ShopItem::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ShopItem::name() const {
  // @@protoc_insertion_point(field_get:TCCamp.ShopItem.Name)
  return name_.GetNoArena();
}
inline void ShopItem::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.ShopItem.Name)
}
#if LANG_CXX11
inline void ShopItem::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.ShopItem.Name)
}
#endif
inline void ShopItem::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.ShopItem.Name)
}
inline void ShopItem::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.ShopItem.Name)
}
inline ::std::string* ShopItem::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.ShopItem.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShopItem::release_name() {
  // @@protoc_insertion_point(field_release:TCCamp.ShopItem.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShopItem::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.ShopItem.Name)
}

// bytes Introduce = 3;
inline void ShopItem::clear_introduce() {
  introduce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ShopItem::introduce() const {
  // @@protoc_insertion_point(field_get:TCCamp.ShopItem.Introduce)
  return introduce_.GetNoArena();
}
inline void ShopItem::set_introduce(const ::std::string& value) {
  
  introduce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.ShopItem.Introduce)
}
#if LANG_CXX11
inline void ShopItem::set_introduce(::std::string&& value) {
  
  introduce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.ShopItem.Introduce)
}
#endif
inline void ShopItem::set_introduce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  introduce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.ShopItem.Introduce)
}
inline void ShopItem::set_introduce(const void* value, size_t size) {
  
  introduce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.ShopItem.Introduce)
}
inline ::std::string* ShopItem::mutable_introduce() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.ShopItem.Introduce)
  return introduce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShopItem::release_introduce() {
  // @@protoc_insertion_point(field_release:TCCamp.ShopItem.Introduce)
  
  return introduce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShopItem::set_allocated_introduce(::std::string* introduce) {
  if (introduce != NULL) {
    
  } else {
    
  }
  introduce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), introduce);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.ShopItem.Introduce)
}

// int32 Price = 4;
inline void ShopItem::clear_price() {
  price_ = 0;
}
inline ::google::protobuf::int32 ShopItem::price() const {
  // @@protoc_insertion_point(field_get:TCCamp.ShopItem.Price)
  return price_;
}
inline void ShopItem::set_price(::google::protobuf::int32 value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.ShopItem.Price)
}

// bool IsDiscount = 5;
inline void ShopItem::clear_isdiscount() {
  isdiscount_ = false;
}
inline bool ShopItem::isdiscount() const {
  // @@protoc_insertion_point(field_get:TCCamp.ShopItem.IsDiscount)
  return isdiscount_;
}
inline void ShopItem::set_isdiscount(bool value) {
  
  isdiscount_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.ShopItem.IsDiscount)
}

// float Rate = 6;
inline void ShopItem::clear_rate() {
  rate_ = 0;
}
inline float ShopItem::rate() const {
  // @@protoc_insertion_point(field_get:TCCamp.ShopItem.Rate)
  return rate_;
}
inline void ShopItem::set_rate(float value) {
  
  rate_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.ShopItem.Rate)
}

// bool IsSingleLimit = 7;
inline void ShopItem::clear_issinglelimit() {
  issinglelimit_ = false;
}
inline bool ShopItem::issinglelimit() const {
  // @@protoc_insertion_point(field_get:TCCamp.ShopItem.IsSingleLimit)
  return issinglelimit_;
}
inline void ShopItem::set_issinglelimit(bool value) {
  
  issinglelimit_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.ShopItem.IsSingleLimit)
}

// int32 SingleLimit = 8;
inline void ShopItem::clear_singlelimit() {
  singlelimit_ = 0;
}
inline ::google::protobuf::int32 ShopItem::singlelimit() const {
  // @@protoc_insertion_point(field_get:TCCamp.ShopItem.SingleLimit)
  return singlelimit_;
}
inline void ShopItem::set_singlelimit(::google::protobuf::int32 value) {
  
  singlelimit_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.ShopItem.SingleLimit)
}

// bool IsGlobalLimit = 9;
inline void ShopItem::clear_isgloballimit() {
  isgloballimit_ = false;
}
inline bool ShopItem::isgloballimit() const {
  // @@protoc_insertion_point(field_get:TCCamp.ShopItem.IsGlobalLimit)
  return isgloballimit_;
}
inline void ShopItem::set_isgloballimit(bool value) {
  
  isgloballimit_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.ShopItem.IsGlobalLimit)
}

// int32 GlobalLimit = 10;
inline void ShopItem::clear_globallimit() {
  globallimit_ = 0;
}
inline ::google::protobuf::int32 ShopItem::globallimit() const {
  // @@protoc_insertion_point(field_get:TCCamp.ShopItem.GlobalLimit)
  return globallimit_;
}
inline void ShopItem::set_globallimit(::google::protobuf::int32 value) {
  
  globallimit_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.ShopItem.GlobalLimit)
}

// bool IsTimeLimit = 11;
inline void ShopItem::clear_istimelimit() {
  istimelimit_ = false;
}
inline bool ShopItem::istimelimit() const {
  // @@protoc_insertion_point(field_get:TCCamp.ShopItem.IsTimeLimit)
  return istimelimit_;
}
inline void ShopItem::set_istimelimit(bool value) {
  
  istimelimit_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.ShopItem.IsTimeLimit)
}

// int32 LimitTime = 12;
inline void ShopItem::clear_limittime() {
  limittime_ = 0;
}
inline ::google::protobuf::int32 ShopItem::limittime() const {
  // @@protoc_insertion_point(field_get:TCCamp.ShopItem.LimitTime)
  return limittime_;
}
inline void ShopItem::set_limittime(::google::protobuf::int32 value) {
  
  limittime_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.ShopItem.LimitTime)
}

// -------------------------------------------------------------------

// ShopCompleteReq

// repeated .TCCamp.ShopItem Items = 1;
inline int ShopCompleteReq::items_size() const {
  return items_.size();
}
inline void ShopCompleteReq::clear_items() {
  items_.Clear();
}
inline ::TCCamp::ShopItem* ShopCompleteReq::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.ShopCompleteReq.Items)
  return items_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::ShopItem >*
ShopCompleteReq::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.ShopCompleteReq.Items)
  return &items_;
}
inline const ::TCCamp::ShopItem& ShopCompleteReq::items(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.ShopCompleteReq.Items)
  return items_.Get(index);
}
inline ::TCCamp::ShopItem* ShopCompleteReq::add_items() {
  // @@protoc_insertion_point(field_add:TCCamp.ShopCompleteReq.Items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::ShopItem >&
ShopCompleteReq::items() const {
  // @@protoc_insertion_point(field_list:TCCamp.ShopCompleteReq.Items)
  return items_;
}

// -------------------------------------------------------------------

// ShopCompleteRsp

// string PlayerID = 1;
inline void ShopCompleteRsp::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ShopCompleteRsp::playerid() const {
  // @@protoc_insertion_point(field_get:TCCamp.ShopCompleteRsp.PlayerID)
  return playerid_.GetNoArena();
}
inline void ShopCompleteRsp::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.ShopCompleteRsp.PlayerID)
}
#if LANG_CXX11
inline void ShopCompleteRsp::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.ShopCompleteRsp.PlayerID)
}
#endif
inline void ShopCompleteRsp::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.ShopCompleteRsp.PlayerID)
}
inline void ShopCompleteRsp::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.ShopCompleteRsp.PlayerID)
}
inline ::std::string* ShopCompleteRsp::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.ShopCompleteRsp.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShopCompleteRsp::release_playerid() {
  // @@protoc_insertion_point(field_release:TCCamp.ShopCompleteRsp.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShopCompleteRsp::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.ShopCompleteRsp.PlayerID)
}

// int32 Result = 2;
inline void ShopCompleteRsp::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 ShopCompleteRsp::result() const {
  // @@protoc_insertion_point(field_get:TCCamp.ShopCompleteRsp.Result)
  return result_;
}
inline void ShopCompleteRsp::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.ShopCompleteRsp.Result)
}

// string Reason = 3;
inline void ShopCompleteRsp::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ShopCompleteRsp::reason() const {
  // @@protoc_insertion_point(field_get:TCCamp.ShopCompleteRsp.Reason)
  return reason_.GetNoArena();
}
inline void ShopCompleteRsp::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.ShopCompleteRsp.Reason)
}
#if LANG_CXX11
inline void ShopCompleteRsp::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.ShopCompleteRsp.Reason)
}
#endif
inline void ShopCompleteRsp::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.ShopCompleteRsp.Reason)
}
inline void ShopCompleteRsp::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.ShopCompleteRsp.Reason)
}
inline ::std::string* ShopCompleteRsp::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.ShopCompleteRsp.Reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShopCompleteRsp::release_reason() {
  // @@protoc_insertion_point(field_release:TCCamp.ShopCompleteRsp.Reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShopCompleteRsp::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.ShopCompleteRsp.Reason)
}

// -------------------------------------------------------------------

// ShopUpdate

// int32 cmd = 1;
inline void ShopUpdate::clear_cmd() {
  cmd_ = 0;
}
inline ::google::protobuf::int32 ShopUpdate::cmd() const {
  // @@protoc_insertion_point(field_get:TCCamp.ShopUpdate.cmd)
  return cmd_;
}
inline void ShopUpdate::set_cmd(::google::protobuf::int32 value) {
  
  cmd_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.ShopUpdate.cmd)
}

// .TCCamp.ShopItem item = 2;
inline bool ShopUpdate::has_item() const {
  return this != internal_default_instance() && item_ != NULL;
}
inline void ShopUpdate::clear_item() {
  if (GetArenaNoVirtual() == NULL && item_ != NULL) {
    delete item_;
  }
  item_ = NULL;
}
inline const ::TCCamp::ShopItem& ShopUpdate::_internal_item() const {
  return *item_;
}
inline const ::TCCamp::ShopItem& ShopUpdate::item() const {
  const ::TCCamp::ShopItem* p = item_;
  // @@protoc_insertion_point(field_get:TCCamp.ShopUpdate.item)
  return p != NULL ? *p : *reinterpret_cast<const ::TCCamp::ShopItem*>(
      &::TCCamp::_ShopItem_default_instance_);
}
inline ::TCCamp::ShopItem* ShopUpdate::release_item() {
  // @@protoc_insertion_point(field_release:TCCamp.ShopUpdate.item)
  
  ::TCCamp::ShopItem* temp = item_;
  item_ = NULL;
  return temp;
}
inline ::TCCamp::ShopItem* ShopUpdate::mutable_item() {
  
  if (item_ == NULL) {
    auto* p = CreateMaybeMessage<::TCCamp::ShopItem>(GetArenaNoVirtual());
    item_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TCCamp.ShopUpdate.item)
  return item_;
}
inline void ShopUpdate::set_allocated_item(::TCCamp::ShopItem* item) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete item_;
  }
  if (item) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      item = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:TCCamp.ShopUpdate.item)
}

// -------------------------------------------------------------------

// ShopUpdateReq

// int32 SyncNum = 1;
inline void ShopUpdateReq::clear_syncnum() {
  syncnum_ = 0;
}
inline ::google::protobuf::int32 ShopUpdateReq::syncnum() const {
  // @@protoc_insertion_point(field_get:TCCamp.ShopUpdateReq.SyncNum)
  return syncnum_;
}
inline void ShopUpdateReq::set_syncnum(::google::protobuf::int32 value) {
  
  syncnum_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.ShopUpdateReq.SyncNum)
}

// repeated .TCCamp.ShopUpdate UpdateList = 2;
inline int ShopUpdateReq::updatelist_size() const {
  return updatelist_.size();
}
inline void ShopUpdateReq::clear_updatelist() {
  updatelist_.Clear();
}
inline ::TCCamp::ShopUpdate* ShopUpdateReq::mutable_updatelist(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.ShopUpdateReq.UpdateList)
  return updatelist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::ShopUpdate >*
ShopUpdateReq::mutable_updatelist() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.ShopUpdateReq.UpdateList)
  return &updatelist_;
}
inline const ::TCCamp::ShopUpdate& ShopUpdateReq::updatelist(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.ShopUpdateReq.UpdateList)
  return updatelist_.Get(index);
}
inline ::TCCamp::ShopUpdate* ShopUpdateReq::add_updatelist() {
  // @@protoc_insertion_point(field_add:TCCamp.ShopUpdateReq.UpdateList)
  return updatelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::ShopUpdate >&
ShopUpdateReq::updatelist() const {
  // @@protoc_insertion_point(field_list:TCCamp.ShopUpdateReq.UpdateList)
  return updatelist_;
}

// -------------------------------------------------------------------

// ShopUpdateRsp

// string PlayerID = 1;
inline void ShopUpdateRsp::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ShopUpdateRsp::playerid() const {
  // @@protoc_insertion_point(field_get:TCCamp.ShopUpdateRsp.PlayerID)
  return playerid_.GetNoArena();
}
inline void ShopUpdateRsp::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.ShopUpdateRsp.PlayerID)
}
#if LANG_CXX11
inline void ShopUpdateRsp::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.ShopUpdateRsp.PlayerID)
}
#endif
inline void ShopUpdateRsp::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.ShopUpdateRsp.PlayerID)
}
inline void ShopUpdateRsp::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.ShopUpdateRsp.PlayerID)
}
inline ::std::string* ShopUpdateRsp::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.ShopUpdateRsp.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShopUpdateRsp::release_playerid() {
  // @@protoc_insertion_point(field_release:TCCamp.ShopUpdateRsp.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShopUpdateRsp::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.ShopUpdateRsp.PlayerID)
}

// int32 Result = 2;
inline void ShopUpdateRsp::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 ShopUpdateRsp::result() const {
  // @@protoc_insertion_point(field_get:TCCamp.ShopUpdateRsp.Result)
  return result_;
}
inline void ShopUpdateRsp::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.ShopUpdateRsp.Result)
}

// string Reason = 3;
inline void ShopUpdateRsp::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ShopUpdateRsp::reason() const {
  // @@protoc_insertion_point(field_get:TCCamp.ShopUpdateRsp.Reason)
  return reason_.GetNoArena();
}
inline void ShopUpdateRsp::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.ShopUpdateRsp.Reason)
}
#if LANG_CXX11
inline void ShopUpdateRsp::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.ShopUpdateRsp.Reason)
}
#endif
inline void ShopUpdateRsp::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.ShopUpdateRsp.Reason)
}
inline void ShopUpdateRsp::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.ShopUpdateRsp.Reason)
}
inline ::std::string* ShopUpdateRsp::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.ShopUpdateRsp.Reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShopUpdateRsp::release_reason() {
  // @@protoc_insertion_point(field_release:TCCamp.ShopUpdateRsp.Reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShopUpdateRsp::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.ShopUpdateRsp.Reason)
}

// int32 SyncNum = 4;
inline void ShopUpdateRsp::clear_syncnum() {
  syncnum_ = 0;
}
inline ::google::protobuf::int32 ShopUpdateRsp::syncnum() const {
  // @@protoc_insertion_point(field_get:TCCamp.ShopUpdateRsp.SyncNum)
  return syncnum_;
}
inline void ShopUpdateRsp::set_syncnum(::google::protobuf::int32 value) {
  
  syncnum_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.ShopUpdateRsp.SyncNum)
}

// -------------------------------------------------------------------

// PlayerBuyReq

// string PlayerID = 1;
inline void PlayerBuyReq::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerBuyReq::playerid() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerBuyReq.PlayerID)
  return playerid_.GetNoArena();
}
inline void PlayerBuyReq::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerBuyReq.PlayerID)
}
#if LANG_CXX11
inline void PlayerBuyReq::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerBuyReq.PlayerID)
}
#endif
inline void PlayerBuyReq::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerBuyReq.PlayerID)
}
inline void PlayerBuyReq::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerBuyReq.PlayerID)
}
inline ::std::string* PlayerBuyReq::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerBuyReq.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerBuyReq::release_playerid() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerBuyReq.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerBuyReq::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerBuyReq.PlayerID)
}

// int32 ItemId = 2;
inline void PlayerBuyReq::clear_itemid() {
  itemid_ = 0;
}
inline ::google::protobuf::int32 PlayerBuyReq::itemid() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerBuyReq.ItemId)
  return itemid_;
}
inline void PlayerBuyReq::set_itemid(::google::protobuf::int32 value) {
  
  itemid_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.PlayerBuyReq.ItemId)
}

// int32 ItemNum = 3;
inline void PlayerBuyReq::clear_itemnum() {
  itemnum_ = 0;
}
inline ::google::protobuf::int32 PlayerBuyReq::itemnum() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerBuyReq.ItemNum)
  return itemnum_;
}
inline void PlayerBuyReq::set_itemnum(::google::protobuf::int32 value) {
  
  itemnum_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.PlayerBuyReq.ItemNum)
}

// -------------------------------------------------------------------

// PlayerBuyRsp

// int32 Result = 1;
inline void PlayerBuyRsp::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 PlayerBuyRsp::result() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerBuyRsp.Result)
  return result_;
}
inline void PlayerBuyRsp::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.PlayerBuyRsp.Result)
}

// string Reason = 2;
inline void PlayerBuyRsp::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerBuyRsp::reason() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerBuyRsp.Reason)
  return reason_.GetNoArena();
}
inline void PlayerBuyRsp::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerBuyRsp.Reason)
}
#if LANG_CXX11
inline void PlayerBuyRsp::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerBuyRsp.Reason)
}
#endif
inline void PlayerBuyRsp::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerBuyRsp.Reason)
}
inline void PlayerBuyRsp::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerBuyRsp.Reason)
}
inline ::std::string* PlayerBuyRsp::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerBuyRsp.Reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerBuyRsp::release_reason() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerBuyRsp.Reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerBuyRsp::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerBuyRsp.Reason)
}

// -------------------------------------------------------------------

// PlayerBagUpdateReq

// string PlayerID = 1;
inline void PlayerBagUpdateReq::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerBagUpdateReq::playerid() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerBagUpdateReq.PlayerID)
  return playerid_.GetNoArena();
}
inline void PlayerBagUpdateReq::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerBagUpdateReq.PlayerID)
}
#if LANG_CXX11
inline void PlayerBagUpdateReq::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerBagUpdateReq.PlayerID)
}
#endif
inline void PlayerBagUpdateReq::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerBagUpdateReq.PlayerID)
}
inline void PlayerBagUpdateReq::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerBagUpdateReq.PlayerID)
}
inline ::std::string* PlayerBagUpdateReq::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerBagUpdateReq.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerBagUpdateReq::release_playerid() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerBagUpdateReq.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerBagUpdateReq::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerBagUpdateReq.PlayerID)
}

// -------------------------------------------------------------------

// BagUpdate

// int32 cmd = 1;
inline void BagUpdate::clear_cmd() {
  cmd_ = 0;
}
inline ::google::protobuf::int32 BagUpdate::cmd() const {
  // @@protoc_insertion_point(field_get:TCCamp.BagUpdate.cmd)
  return cmd_;
}
inline void BagUpdate::set_cmd(::google::protobuf::int32 value) {
  
  cmd_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.BagUpdate.cmd)
}

// .TCCamp.BagItem item = 2;
inline bool BagUpdate::has_item() const {
  return this != internal_default_instance() && item_ != NULL;
}
inline void BagUpdate::clear_item() {
  if (GetArenaNoVirtual() == NULL && item_ != NULL) {
    delete item_;
  }
  item_ = NULL;
}
inline const ::TCCamp::BagItem& BagUpdate::_internal_item() const {
  return *item_;
}
inline const ::TCCamp::BagItem& BagUpdate::item() const {
  const ::TCCamp::BagItem* p = item_;
  // @@protoc_insertion_point(field_get:TCCamp.BagUpdate.item)
  return p != NULL ? *p : *reinterpret_cast<const ::TCCamp::BagItem*>(
      &::TCCamp::_BagItem_default_instance_);
}
inline ::TCCamp::BagItem* BagUpdate::release_item() {
  // @@protoc_insertion_point(field_release:TCCamp.BagUpdate.item)
  
  ::TCCamp::BagItem* temp = item_;
  item_ = NULL;
  return temp;
}
inline ::TCCamp::BagItem* BagUpdate::mutable_item() {
  
  if (item_ == NULL) {
    auto* p = CreateMaybeMessage<::TCCamp::BagItem>(GetArenaNoVirtual());
    item_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TCCamp.BagUpdate.item)
  return item_;
}
inline void BagUpdate::set_allocated_item(::TCCamp::BagItem* item) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete item_;
  }
  if (item) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      item = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:TCCamp.BagUpdate.item)
}

// -------------------------------------------------------------------

// PlayerBagUpdateRsp

// int32 Result = 1;
inline void PlayerBagUpdateRsp::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 PlayerBagUpdateRsp::result() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerBagUpdateRsp.Result)
  return result_;
}
inline void PlayerBagUpdateRsp::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.PlayerBagUpdateRsp.Result)
}

// string Reason = 2;
inline void PlayerBagUpdateRsp::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerBagUpdateRsp::reason() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerBagUpdateRsp.Reason)
  return reason_.GetNoArena();
}
inline void PlayerBagUpdateRsp::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerBagUpdateRsp.Reason)
}
#if LANG_CXX11
inline void PlayerBagUpdateRsp::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerBagUpdateRsp.Reason)
}
#endif
inline void PlayerBagUpdateRsp::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerBagUpdateRsp.Reason)
}
inline void PlayerBagUpdateRsp::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerBagUpdateRsp.Reason)
}
inline ::std::string* PlayerBagUpdateRsp::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerBagUpdateRsp.Reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerBagUpdateRsp::release_reason() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerBagUpdateRsp.Reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerBagUpdateRsp::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerBagUpdateRsp.Reason)
}

// repeated .TCCamp.BagUpdate UpdateList = 3;
inline int PlayerBagUpdateRsp::updatelist_size() const {
  return updatelist_.size();
}
inline void PlayerBagUpdateRsp::clear_updatelist() {
  updatelist_.Clear();
}
inline ::TCCamp::BagUpdate* PlayerBagUpdateRsp::mutable_updatelist(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerBagUpdateRsp.UpdateList)
  return updatelist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::BagUpdate >*
PlayerBagUpdateRsp::mutable_updatelist() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.PlayerBagUpdateRsp.UpdateList)
  return &updatelist_;
}
inline const ::TCCamp::BagUpdate& PlayerBagUpdateRsp::updatelist(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerBagUpdateRsp.UpdateList)
  return updatelist_.Get(index);
}
inline ::TCCamp::BagUpdate* PlayerBagUpdateRsp::add_updatelist() {
  // @@protoc_insertion_point(field_add:TCCamp.PlayerBagUpdateRsp.UpdateList)
  return updatelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::BagUpdate >&
PlayerBagUpdateRsp::updatelist() const {
  // @@protoc_insertion_point(field_list:TCCamp.PlayerBagUpdateRsp.UpdateList)
  return updatelist_;
}

// -------------------------------------------------------------------

// PlayerMoneyReq

// string PlayerID = 1;
inline void PlayerMoneyReq::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerMoneyReq::playerid() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerMoneyReq.PlayerID)
  return playerid_.GetNoArena();
}
inline void PlayerMoneyReq::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerMoneyReq.PlayerID)
}
#if LANG_CXX11
inline void PlayerMoneyReq::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerMoneyReq.PlayerID)
}
#endif
inline void PlayerMoneyReq::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerMoneyReq.PlayerID)
}
inline void PlayerMoneyReq::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerMoneyReq.PlayerID)
}
inline ::std::string* PlayerMoneyReq::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerMoneyReq.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerMoneyReq::release_playerid() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerMoneyReq.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerMoneyReq::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerMoneyReq.PlayerID)
}

// -------------------------------------------------------------------

// PlayerMoneyRsp

// int32 Result = 1;
inline void PlayerMoneyRsp::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 PlayerMoneyRsp::result() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerMoneyRsp.Result)
  return result_;
}
inline void PlayerMoneyRsp::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.PlayerMoneyRsp.Result)
}

// string Reason = 2;
inline void PlayerMoneyRsp::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerMoneyRsp::reason() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerMoneyRsp.Reason)
  return reason_.GetNoArena();
}
inline void PlayerMoneyRsp::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerMoneyRsp.Reason)
}
#if LANG_CXX11
inline void PlayerMoneyRsp::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerMoneyRsp.Reason)
}
#endif
inline void PlayerMoneyRsp::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerMoneyRsp.Reason)
}
inline void PlayerMoneyRsp::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerMoneyRsp.Reason)
}
inline ::std::string* PlayerMoneyRsp::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerMoneyRsp.Reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerMoneyRsp::release_reason() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerMoneyRsp.Reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerMoneyRsp::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerMoneyRsp.Reason)
}

// int32 Money = 3;
inline void PlayerMoneyRsp::clear_money() {
  money_ = 0;
}
inline ::google::protobuf::int32 PlayerMoneyRsp::money() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerMoneyRsp.Money)
  return money_;
}
inline void PlayerMoneyRsp::set_money(::google::protobuf::int32 value) {
  
  money_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.PlayerMoneyRsp.Money)
}

// -------------------------------------------------------------------

// PlayerStatusReq

// string PlayerID = 1;
inline void PlayerStatusReq::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerStatusReq::playerid() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerStatusReq.PlayerID)
  return playerid_.GetNoArena();
}
inline void PlayerStatusReq::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerStatusReq.PlayerID)
}
#if LANG_CXX11
inline void PlayerStatusReq::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerStatusReq.PlayerID)
}
#endif
inline void PlayerStatusReq::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerStatusReq.PlayerID)
}
inline void PlayerStatusReq::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerStatusReq.PlayerID)
}
inline ::std::string* PlayerStatusReq::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerStatusReq.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerStatusReq::release_playerid() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerStatusReq.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerStatusReq::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerStatusReq.PlayerID)
}

// float PositionX = 2;
inline void PlayerStatusReq::clear_positionx() {
  positionx_ = 0;
}
inline float PlayerStatusReq::positionx() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerStatusReq.PositionX)
  return positionx_;
}
inline void PlayerStatusReq::set_positionx(float value) {
  
  positionx_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.PlayerStatusReq.PositionX)
}

// float PositionY = 3;
inline void PlayerStatusReq::clear_positiony() {
  positiony_ = 0;
}
inline float PlayerStatusReq::positiony() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerStatusReq.PositionY)
  return positiony_;
}
inline void PlayerStatusReq::set_positiony(float value) {
  
  positiony_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.PlayerStatusReq.PositionY)
}

// float Rotation = 4;
inline void PlayerStatusReq::clear_rotation() {
  rotation_ = 0;
}
inline float PlayerStatusReq::rotation() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerStatusReq.Rotation)
  return rotation_;
}
inline void PlayerStatusReq::set_rotation(float value) {
  
  rotation_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.PlayerStatusReq.Rotation)
}

// bool IsWalking = 5;
inline void PlayerStatusReq::clear_iswalking() {
  iswalking_ = false;
}
inline bool PlayerStatusReq::iswalking() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerStatusReq.IsWalking)
  return iswalking_;
}
inline void PlayerStatusReq::set_iswalking(bool value) {
  
  iswalking_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.PlayerStatusReq.IsWalking)
}

// -------------------------------------------------------------------

// PlayerStatusRsp

// int32 Result = 1;
inline void PlayerStatusRsp::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 PlayerStatusRsp::result() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerStatusRsp.Result)
  return result_;
}
inline void PlayerStatusRsp::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.PlayerStatusRsp.Result)
}

// string Reason = 2;
inline void PlayerStatusRsp::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerStatusRsp::reason() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerStatusRsp.Reason)
  return reason_.GetNoArena();
}
inline void PlayerStatusRsp::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerStatusRsp.Reason)
}
#if LANG_CXX11
inline void PlayerStatusRsp::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerStatusRsp.Reason)
}
#endif
inline void PlayerStatusRsp::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerStatusRsp.Reason)
}
inline void PlayerStatusRsp::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerStatusRsp.Reason)
}
inline ::std::string* PlayerStatusRsp::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerStatusRsp.Reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerStatusRsp::release_reason() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerStatusRsp.Reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerStatusRsp::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerStatusRsp.Reason)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TCCamp

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::TCCamp::CLIENT_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TCCamp::CLIENT_CMD>() {
  return ::TCCamp::CLIENT_CMD_descriptor();
}
template <> struct is_proto_enum< ::TCCamp::SERVER_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TCCamp::SERVER_CMD>() {
  return ::TCCamp::SERVER_CMD_descriptor();
}
template <> struct is_proto_enum< ::TCCamp::ITEM_UPDATE_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TCCamp::ITEM_UPDATE_CMD>() {
  return ::TCCamp::ITEM_UPDATE_CMD_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_player_2eproto
